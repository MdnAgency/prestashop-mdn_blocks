<?php
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksModel.php';
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksImageModel.php';
use PrestaShop\PrestaShop\Core\Module\WidgetInterface;

if (!defined('_PS_VERSION_')) {
    exit;
}
class Mdn_Blocks extends Module implements WidgetInterface {
    public $tabs = [
        [
            'name' => 'Blocs de contenu',
            'class_name' => 'AdminBlocks',
            'visible' => true,
            'parent_class_name' => 'IMPROVE',
            'icon' => 'desktop_mac'
        ],
        [
            'name' => 'Blocs image',
            'class_name' => 'AdminBlocksImage',
            'visible' => true,
            'parent_class_name' => 'IMPROVE',
            'icon' => 'desktop_mac'
        ]
    ];


    public function __construct()
    {
        $this->name = 'mdn_blocks';
        $this->author = 'Maison du Net - Loris';
        $this->tab = 'front_office_features';
        $this->version = '1.1.0';
        $this->bootstrap = true;
        $this->ps_versions_compliancy = array('min' => '1.7.7.0', 'max' => _PS_VERSION_);
        $this->displayName = "Blocs de contenus & d'images";
        $this->description = 'Module pour gÃ©rer les textes et les images';
        parent::__construct();

    }


    public function install()
    {
        BlocksModel::createContentTable();
        BlocksImageModel::createContentTable();

        return parent::install(); // TODO: Change the autogenerated stub
    }

    public function uninstall()
    {
        return parent::uninstall(); // TODO: Change the autogenerated stub
    }


    public function renderWidget($hookName = null, array $configuration = [])
    {
        if (!$this->active) {
            return;
        }

        $this->smarty->assign($this->getWidgetVariables($hookName, $configuration));

        $template = (!empty($configuration['template'])) ? $configuration['template'] : "default";

        if(!empty($configuration['type']) && $configuration['type'] == "image")
            return $this->display(__FILE__, 'views/templates/widget/image/'.$template.'.tpl');
        return $this->display(__FILE__, 'views/templates/widget/content/'.$template.'.tpl');
    }


    public function getWidgetVariables($hookName, array $configuration)
    {
        if(!empty($configuration['type']) && $configuration['type'] == "image") {
            $Slider =  new PrestaShopCollection('BlocksImageModel');
            $results = $Slider
                ->where('active_image', '=', '1')
                ->where('technical_id', '=',  ($hookName))
                ->getAll();
            $lang = $this->context->language->id ?? Configuration::get('PS_LANG_DEFAULT');

            return ['results' => array_map(function ($v) use($lang) {
                return [
                    'image_alt' => $v->image_alt[$lang],
                    'image' => $v->image[$lang],
                    'class' => $v->class
                ];
            }, $results->getResults()), 'lang' => $lang];
        }
        else {
            $Slider =  new PrestaShopCollection('BlocksModel');
            $results = $Slider
                ->where('active_block', '=', '1')
                ->where('technical_id', '=', strtoupper($hookName))
                ->getAll();

            $lang = $this->context->language->id ?? Configuration::get('PS_LANG_DEFAULT');

            return ['results' => array_map(function ($v) use($lang) {
                return [
                    'content' => $v->content[$lang],
                    'class' => $v->class
                ];
            }, $results->getResults()), 'lang' => $lang];
        }
    }

}