<?php
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksModel.php';
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksImageModel.php';
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksCategoryModel.php';
require_once _PS_MODULE_DIR_ . '/mdn_blocks/classes/BlocksProductModel.php';
use PrestaShop\PrestaShop\Core\Module\WidgetInterface;
use PrestaShop\PrestaShop\Adapter\Image\ImageRetriever;
use PrestaShop\PrestaShop\Adapter\Product\PriceFormatter;
use PrestaShop\PrestaShop\Core\Product\ProductListingPresenter;
use PrestaShop\PrestaShop\Adapter\Product\ProductColorsRetriever;

if (!defined('_PS_VERSION_')) {
    exit;
}
class Mdn_Blocks extends Module implements WidgetInterface {
    public $tabs = [
        [
            'name' => 'Blocs de contenu',
            'class_name' => 'AdminBlocks',
            'visible' => true,
            'parent_class_name' => 'IMPROVE',
            'icon' => 'desktop_mac'
        ],
        [
            'name' => 'Blocs de contenu',
            'class_name' => 'AdminBlocks',
            'visible' => true,
            'parent_class_name' => 'AdminBlocks',
            'icon' => 'desktop_mac'
        ],
        [
            'name' => 'Blocs image',
            'class_name' => 'AdminBlocksImage',
            'visible' => true,
            'parent_class_name' => 'AdminBlocks',
            'icon' => 'desktop_mac'
        ],
        [
            'name' => 'Blocs catégories',
            'class_name' => 'AdminBlocksCategory',
            'visible' => true,
            'parent_class_name' => 'AdminBlocks',
            'icon' => 'desktop_mac'
        ],
        [
            'name' => 'Blocs produits',
            'class_name' => 'AdminBlocksProduct',
            'visible' => true,
            'parent_class_name' => 'AdminBlocks',
            'icon' => 'desktop_mac'
        ]
    ];


    public function __construct()
    {
        $this->name = 'mdn_blocks';
        $this->author = 'Maison du Net - Loris';
        $this->tab = 'front_office_features';
        $this->version = '1.3.0';
        $this->bootstrap = true;
        $this->ps_versions_compliancy = array('min' => '1.7.7.0', 'max' => _PS_VERSION_);
        $this->displayName = "Blocs éditables";
        $this->description = "Gérer vos blocs de contenu";
        parent::__construct();

    }


    public function install()
    {
        BlocksModel::createContentTable();
        BlocksImageModel::createContentTable();
        BlocksCategoryModel::createContentTable();
        BlocksProductModel::createContentTable();

        return parent::install(); // TODO: Change the autogenerated stub
    }

    public function uninstall()
    {
        return parent::uninstall(); // TODO: Change the autogenerated stub
    }


    public function renderWidget($hookName = null, array $configuration = [])
    {
        if (!$this->active) {
            return null;
        }

        $vars = $this->getWidgetVariables($hookName, $configuration);

        $this->smarty->assign($vars);


        if (count($vars['results']) >= 1 && !empty($vars['results'][0]['template'])) {
            if (!empty($configuration['type']))
                return $this->display(__FILE__, 'views/templates/widget/' . $configuration['type'] . '/' . $vars['results'][0]['template'] . '.tpl');

            return $this->display(__FILE__, 'views/templates/widget/text/' . $vars['results'][0]['template'] . '.tpl');
        } else {
            $this->smarty->assign([
                'dev' => _PS_MODE_DEV_ || true,
                'type' => $configuration['type'],
                'hook' => $configuration['hook']
            ]);
            return $this->display(__FILE__, 'views/templates/widget/empty.tpl');
        }
    }


    public function getWidgetVariables($hookName, array $configuration)
    {
        $lang = $this->context->language->id ?? Configuration::get('PS_LANG_DEFAULT');

        $model = 'BlocksModel';
        switch ($configuration['type']) {
            case "image":
                $model = 'BlocksImageModel';
                break;
            case "category":
                $model = 'BlocksCategoryModel';
                break;
            case "text":
                $model = 'BlocksModel';
                break;
            case "product":
                $model = 'BlocksProductModel';
                break;
        }

        $Slider = new PrestaShopCollection($model);
        $results = $Slider
            ->where('active_block', '=', '1')
            ->where('technical_id', '=', ($hookName))
            ->getAll();

        switch ($configuration['type']) {
            case "image":
                return ['results' => array_map(function ($v) use ($lang) {
                    return [
                        'template' => $v->template,
                        'image_alt' => $v->image_alt[$lang],
                        'image' => $v->image[$lang],
                        'class' => $v->class
                    ];
                }, $results->getResults()), 'lang' => $lang];
            case "category":
                return ['results' => array_map(function ($v) use ($lang) {
                    $categories = explode(",", $v->categories[$lang]);
                    $categories = array_map(function ($v) use ($lang) {
                        return new Category($v, $lang);
                    }, $categories);
                    return [
                        'template' => $v->template,
                        'categories' => $categories,
                        'class' => $v->class
                    ];
                }, $results->getResults()), 'lang' => $lang];
            case "text":
                return ['results' => array_map(function ($v) use($lang) {
                    return [
                        'template' => $v->template,
                        'content' => $v->content[$lang],
                        'class' => $v->class
                    ];
                }, $results->getResults()), 'lang' => $lang];
            case "product":
                return ['results' => array_map(function ($v) use ($lang) {
                    $products = [];
                    if($v->selector_type == "category") {
                        $products = (new Category($v->products[$lang], $lang))->getProducts($lang, 0, $v->product_limit);
                    }
                    else if($v->selector_type == "new") {
                        $products = Product::getNewProducts($lang, 0, $v->product_limit);
                    }
                    else {
                        $products = [];
                    }

                    $assembler = new ProductAssembler($this->context);

                    $presenterFactory = new ProductPresenterFactory($this->context);
                    $presentationSettings = $presenterFactory->getPresentationSettings();
                    $presenter = new ProductListingPresenter(
                        new ImageRetriever(
                            $this->context->link
                        ),
                        $this->context->link,
                        new PriceFormatter(),
                        new ProductColorsRetriever(),
                        $this->context->getTranslator()
                    );

                    $products_for_template = array();

                    if (is_array($products)) {
                        foreach ($products as $rawProduct) {
                            $products_for_template[] = $presenter->present(
                                $presentationSettings,
                                $assembler->assembleProduct($rawProduct),
                                $this->context->language
                            );
                        }
                    }

                    return [
                        'template' => $v->template,
                        'products' => $products_for_template,
                        'class' => $v->class
                    ];
                }, $results->getResults()), 'lang' => $lang];
        }
    }
}